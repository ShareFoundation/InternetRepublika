<?php


/**
 * Skeleton subclass for performing query and update operations on the 'comment' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu Feb  7 10:48:56 2013
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.comment
 */
class CommentPeer extends BaseCommentPeer {

  public static function getCommentTree($itemId, $itemType, $parent = NULL, $list = array(), $level = 0){
    $level++;
    $c = new Criteria();
    
    if($parent == NULL || $parent == 0){
      $c1 = $c->getNewCriterion(self::PARENT_ID, NULL);
      $c2 = $c->getNewCriterion(self::PARENT_ID, 0);
      $c3 = $c1->addOr($c2);
      $c->addAnd($c3);
    }else{
      $c->addAnd(self::PARENT_ID, $parent);  
    }
    $c->add(self::ITEM_ID, $itemId);
    $c->add(self::ITEM_TYPE, $itemType);
    $c->addAscendingOrderByColumn(self::CREATED_AT);
    $objects = self::doSelect($c);
    if(!empty($objects)){
      foreach($objects as $item){
        $list[] = array('object' => $item, 'level' => $level);
        $list = self::getCommentTree($itemId, $itemType, $item->getId(), $list, $level);
      }
    }
    return $list;
  }
  
  public static function getComments($itemId, $itemType, $parentId = NULL){
    $c = new Criteria();
    if($parentId == NULL || $parentId == 0){
      $c1 = $c->getNewCriterion(self::PARENT_ID, NULL);
      $c2 = $c->getNewCriterion(self::PARENT_ID, 0);
      $c3 = $c1->addOr($c2);
      $c->addAnd($c3);
    }else{
      $c->addAnd(self::PARENT_ID, $parentId);  
    }
    $c->add(self::ITEM_ID, $itemId);
    $c->add(self::ITEM_TYPE, $itemType);
    $c->addAscendingOrderByColumn(self::CREATED_AT);
    return self::doSelect($c);
  }
  
  public static function addComment($itemId, $itemType, $comment, $name = '', $parentId = NULL){
    $newComment = new Comment();
    if(sfContext::getInstance()->getUser()->isAuthenticated()){
      $newComment->setUserId(sfContext::getInstance()->getUser()->getGuardUser()->getId());  
    }else{
      $newComment->setUserId(null);
    }
    $newComment->setName($name);
    $newComment->setItemId($itemId);
    $newComment->setItemType($itemType);
    $newComment->setText($comment);
    $newComment->setParentId($parentId);
    $newComment->save();
  }
  
  
} // CommentPeer
