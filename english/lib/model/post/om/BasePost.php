<?php

/**
 * Base class that represents a row from the 'post' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Tue Feb 19 16:24:40 2013
 *
 * @package    lib.model.post.om
 */
abstract class BasePost extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        PostPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the partie_id field.
	 * @var        int
	 */
	protected $partie_id;

	/**
	 * The value for the replica_post_id field.
	 * @var        int
	 */
	protected $replica_post_id;

	/**
	 * The value for the type field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $type;

	/**
	 * The value for the title field.
	 * @var        string
	 */
	protected $title;

	/**
	 * The value for the url field.
	 * @var        string
	 */
	protected $url;

	/**
	 * The value for the text field.
	 * @var        string
	 */
	protected $text;

	/**
	 * The value for the photo_file field.
	 * @var        string
	 */
	protected $photo_file;

	/**
	 * The value for the photo_url field.
	 * @var        string
	 */
	protected $photo_url;

	/**
	 * The value for the quote field.
	 * @var        string
	 */
	protected $quote;

	/**
	 * The value for the quote_author field.
	 * @var        string
	 */
	protected $quote_author;

	/**
	 * The value for the link_title field.
	 * @var        string
	 */
	protected $link_title;

	/**
	 * The value for the link_url field.
	 * @var        string
	 */
	protected $link_url;

	/**
	 * The value for the link_image field.
	 * @var        string
	 */
	protected $link_image;

	/**
	 * The value for the video_url field.
	 * @var        string
	 */
	protected $video_url;

	/**
	 * The value for the total_index field.
	 * Note: this column has a database default value of: 0
	 * @var        double
	 */
	protected $total_index;

	/**
	 * The value for the best_badge_1 field.
	 * @var        int
	 */
	protected $best_badge_1;

	/**
	 * The value for the best_badge_2 field.
	 * @var        int
	 */
	protected $best_badge_2;

	/**
	 * The value for the is_published field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $is_published;

	/**
	 * The value for the is_featured field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $is_featured;

	/**
	 * The value for the comments_count field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $comments_count;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * @var        Partie
	 */
	protected $aPartie;

	/**
	 * @var        Post
	 */
	protected $aPostRelatedByReplicaPostId;

	/**
	 * @var        array PostBadge[] Collection to store aggregation of PostBadge objects.
	 */
	protected $collPostBadges;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPostBadges.
	 */
	private $lastPostBadgeCriteria = null;

	/**
	 * @var        array Inappropriate[] Collection to store aggregation of Inappropriate objects.
	 */
	protected $collInappropriates;

	/**
	 * @var        Criteria The criteria used to select the current contents of collInappropriates.
	 */
	private $lastInappropriateCriteria = null;

	/**
	 * @var        array Post[] Collection to store aggregation of Post objects.
	 */
	protected $collPostsRelatedByReplicaPostId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPostsRelatedByReplicaPostId.
	 */
	private $lastPostRelatedByReplicaPostIdCriteria = null;

	/**
	 * @var        array PostPollAnswer[] Collection to store aggregation of PostPollAnswer objects.
	 */
	protected $collPostPollAnswers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPostPollAnswers.
	 */
	private $lastPostPollAnswerCriteria = null;

	/**
	 * @var        array PostPollVote[] Collection to store aggregation of PostPollVote objects.
	 */
	protected $collPostPollVotes;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPostPollVotes.
	 */
	private $lastPostPollVoteCriteria = null;

	/**
	 * @var        array PostVisits[] Collection to store aggregation of PostVisits objects.
	 */
	protected $collPostVisitss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPostVisitss.
	 */
	private $lastPostVisitsCriteria = null;

	/**
	 * @var        array PostDailyStats[] Collection to store aggregation of PostDailyStats objects.
	 */
	protected $collPostDailyStatss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPostDailyStatss.
	 */
	private $lastPostDailyStatsCriteria = null;

	/**
	 * @var        array PostIndex[] Collection to store aggregation of PostIndex objects.
	 */
	protected $collPostIndexs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPostIndexs.
	 */
	private $lastPostIndexCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'PostPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->type = 1;
		$this->total_index = 0;
		$this->is_published = true;
		$this->is_featured = false;
		$this->comments_count = 0;
	}

	/**
	 * Initializes internal state of BasePost object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [partie_id] column value.
	 * 
	 * @return     int
	 */
	public function getPartieId()
	{
		return $this->partie_id;
	}

	/**
	 * Get the [replica_post_id] column value.
	 * 
	 * @return     int
	 */
	public function getReplicaPostId()
	{
		return $this->replica_post_id;
	}

	/**
	 * Get the [type] column value.
	 * 
	 * @return     int
	 */
	public function getType()
	{
		return $this->type;
	}

	/**
	 * Get the [title] column value.
	 * 
	 * @return     string
	 */
	public function getTitle()
	{
		return $this->title;
	}

	/**
	 * Get the [url] column value.
	 * 
	 * @return     string
	 */
	public function getUrl()
	{
		return $this->url;
	}

	/**
	 * Get the [text] column value.
	 * 
	 * @return     string
	 */
	public function getText()
	{
		return $this->text;
	}

	/**
	 * Get the [photo_file] column value.
	 * 
	 * @return     string
	 */
	public function getPhotoFile()
	{
		return $this->photo_file;
	}

	/**
	 * Get the [photo_url] column value.
	 * 
	 * @return     string
	 */
	public function getPhotoUrl()
	{
		return $this->photo_url;
	}

	/**
	 * Get the [quote] column value.
	 * 
	 * @return     string
	 */
	public function getQuote()
	{
		return $this->quote;
	}

	/**
	 * Get the [quote_author] column value.
	 * 
	 * @return     string
	 */
	public function getQuoteAuthor()
	{
		return $this->quote_author;
	}

	/**
	 * Get the [link_title] column value.
	 * 
	 * @return     string
	 */
	public function getLinkTitle()
	{
		return $this->link_title;
	}

	/**
	 * Get the [link_url] column value.
	 * 
	 * @return     string
	 */
	public function getLinkUrl()
	{
		return $this->link_url;
	}

	/**
	 * Get the [link_image] column value.
	 * 
	 * @return     string
	 */
	public function getLinkImage()
	{
		return $this->link_image;
	}

	/**
	 * Get the [video_url] column value.
	 * 
	 * @return     string
	 */
	public function getVideoUrl()
	{
		return $this->video_url;
	}

	/**
	 * Get the [total_index] column value.
	 * 
	 * @return     double
	 */
	public function getTotalIndex()
	{
		return $this->total_index;
	}

	/**
	 * Get the [best_badge_1] column value.
	 * 
	 * @return     int
	 */
	public function getBestBadge1()
	{
		return $this->best_badge_1;
	}

	/**
	 * Get the [best_badge_2] column value.
	 * 
	 * @return     int
	 */
	public function getBestBadge2()
	{
		return $this->best_badge_2;
	}

	/**
	 * Get the [is_published] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsPublished()
	{
		return $this->is_published;
	}

	/**
	 * Get the [is_featured] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsFeatured()
	{
		return $this->is_featured;
	}

	/**
	 * Get the [comments_count] column value.
	 * 
	 * @return     int
	 */
	public function getCommentsCount()
	{
		return $this->comments_count;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Post The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = PostPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [partie_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Post The current object (for fluent API support)
	 */
	public function setPartieId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->partie_id !== $v) {
			$this->partie_id = $v;
			$this->modifiedColumns[] = PostPeer::PARTIE_ID;
		}

		if ($this->aPartie !== null && $this->aPartie->getId() !== $v) {
			$this->aPartie = null;
		}

		return $this;
	} // setPartieId()

	/**
	 * Set the value of [replica_post_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Post The current object (for fluent API support)
	 */
	public function setReplicaPostId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->replica_post_id !== $v) {
			$this->replica_post_id = $v;
			$this->modifiedColumns[] = PostPeer::REPLICA_POST_ID;
		}

		if ($this->aPostRelatedByReplicaPostId !== null && $this->aPostRelatedByReplicaPostId->getId() !== $v) {
			$this->aPostRelatedByReplicaPostId = null;
		}

		return $this;
	} // setReplicaPostId()

	/**
	 * Set the value of [type] column.
	 * 
	 * @param      int $v new value
	 * @return     Post The current object (for fluent API support)
	 */
	public function setType($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->type !== $v || $this->isNew()) {
			$this->type = $v;
			$this->modifiedColumns[] = PostPeer::TYPE;
		}

		return $this;
	} // setType()

	/**
	 * Set the value of [title] column.
	 * 
	 * @param      string $v new value
	 * @return     Post The current object (for fluent API support)
	 */
	public function setTitle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->title !== $v) {
			$this->title = $v;
			$this->modifiedColumns[] = PostPeer::TITLE;
		}

		return $this;
	} // setTitle()

	/**
	 * Set the value of [url] column.
	 * 
	 * @param      string $v new value
	 * @return     Post The current object (for fluent API support)
	 */
	public function setUrl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->url !== $v) {
			$this->url = $v;
			$this->modifiedColumns[] = PostPeer::URL;
		}

		return $this;
	} // setUrl()

	/**
	 * Set the value of [text] column.
	 * 
	 * @param      string $v new value
	 * @return     Post The current object (for fluent API support)
	 */
	public function setText($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->text !== $v) {
			$this->text = $v;
			$this->modifiedColumns[] = PostPeer::TEXT;
		}

		return $this;
	} // setText()

	/**
	 * Set the value of [photo_file] column.
	 * 
	 * @param      string $v new value
	 * @return     Post The current object (for fluent API support)
	 */
	public function setPhotoFile($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->photo_file !== $v) {
			$this->photo_file = $v;
			$this->modifiedColumns[] = PostPeer::PHOTO_FILE;
		}

		return $this;
	} // setPhotoFile()

	/**
	 * Set the value of [photo_url] column.
	 * 
	 * @param      string $v new value
	 * @return     Post The current object (for fluent API support)
	 */
	public function setPhotoUrl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->photo_url !== $v) {
			$this->photo_url = $v;
			$this->modifiedColumns[] = PostPeer::PHOTO_URL;
		}

		return $this;
	} // setPhotoUrl()

	/**
	 * Set the value of [quote] column.
	 * 
	 * @param      string $v new value
	 * @return     Post The current object (for fluent API support)
	 */
	public function setQuote($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->quote !== $v) {
			$this->quote = $v;
			$this->modifiedColumns[] = PostPeer::QUOTE;
		}

		return $this;
	} // setQuote()

	/**
	 * Set the value of [quote_author] column.
	 * 
	 * @param      string $v new value
	 * @return     Post The current object (for fluent API support)
	 */
	public function setQuoteAuthor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->quote_author !== $v) {
			$this->quote_author = $v;
			$this->modifiedColumns[] = PostPeer::QUOTE_AUTHOR;
		}

		return $this;
	} // setQuoteAuthor()

	/**
	 * Set the value of [link_title] column.
	 * 
	 * @param      string $v new value
	 * @return     Post The current object (for fluent API support)
	 */
	public function setLinkTitle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->link_title !== $v) {
			$this->link_title = $v;
			$this->modifiedColumns[] = PostPeer::LINK_TITLE;
		}

		return $this;
	} // setLinkTitle()

	/**
	 * Set the value of [link_url] column.
	 * 
	 * @param      string $v new value
	 * @return     Post The current object (for fluent API support)
	 */
	public function setLinkUrl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->link_url !== $v) {
			$this->link_url = $v;
			$this->modifiedColumns[] = PostPeer::LINK_URL;
		}

		return $this;
	} // setLinkUrl()

	/**
	 * Set the value of [link_image] column.
	 * 
	 * @param      string $v new value
	 * @return     Post The current object (for fluent API support)
	 */
	public function setLinkImage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->link_image !== $v) {
			$this->link_image = $v;
			$this->modifiedColumns[] = PostPeer::LINK_IMAGE;
		}

		return $this;
	} // setLinkImage()

	/**
	 * Set the value of [video_url] column.
	 * 
	 * @param      string $v new value
	 * @return     Post The current object (for fluent API support)
	 */
	public function setVideoUrl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->video_url !== $v) {
			$this->video_url = $v;
			$this->modifiedColumns[] = PostPeer::VIDEO_URL;
		}

		return $this;
	} // setVideoUrl()

	/**
	 * Set the value of [total_index] column.
	 * 
	 * @param      double $v new value
	 * @return     Post The current object (for fluent API support)
	 */
	public function setTotalIndex($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->total_index !== $v || $this->isNew()) {
			$this->total_index = $v;
			$this->modifiedColumns[] = PostPeer::TOTAL_INDEX;
		}

		return $this;
	} // setTotalIndex()

	/**
	 * Set the value of [best_badge_1] column.
	 * 
	 * @param      int $v new value
	 * @return     Post The current object (for fluent API support)
	 */
	public function setBestBadge1($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->best_badge_1 !== $v) {
			$this->best_badge_1 = $v;
			$this->modifiedColumns[] = PostPeer::BEST_BADGE_1;
		}

		return $this;
	} // setBestBadge1()

	/**
	 * Set the value of [best_badge_2] column.
	 * 
	 * @param      int $v new value
	 * @return     Post The current object (for fluent API support)
	 */
	public function setBestBadge2($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->best_badge_2 !== $v) {
			$this->best_badge_2 = $v;
			$this->modifiedColumns[] = PostPeer::BEST_BADGE_2;
		}

		return $this;
	} // setBestBadge2()

	/**
	 * Set the value of [is_published] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Post The current object (for fluent API support)
	 */
	public function setIsPublished($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_published !== $v || $this->isNew()) {
			$this->is_published = $v;
			$this->modifiedColumns[] = PostPeer::IS_PUBLISHED;
		}

		return $this;
	} // setIsPublished()

	/**
	 * Set the value of [is_featured] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Post The current object (for fluent API support)
	 */
	public function setIsFeatured($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_featured !== $v || $this->isNew()) {
			$this->is_featured = $v;
			$this->modifiedColumns[] = PostPeer::IS_FEATURED;
		}

		return $this;
	} // setIsFeatured()

	/**
	 * Set the value of [comments_count] column.
	 * 
	 * @param      int $v new value
	 * @return     Post The current object (for fluent API support)
	 */
	public function setCommentsCount($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->comments_count !== $v || $this->isNew()) {
			$this->comments_count = $v;
			$this->modifiedColumns[] = PostPeer::COMMENTS_COUNT;
		}

		return $this;
	} // setCommentsCount()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Post The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PostPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Post The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PostPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->type !== 1) {
				return false;
			}

			if ($this->total_index !== 0) {
				return false;
			}

			if ($this->is_published !== true) {
				return false;
			}

			if ($this->is_featured !== false) {
				return false;
			}

			if ($this->comments_count !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->partie_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->replica_post_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->type = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->title = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->url = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->text = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->photo_file = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->photo_url = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->quote = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->quote_author = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->link_title = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->link_url = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->link_image = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->video_url = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->total_index = ($row[$startcol + 15] !== null) ? (double) $row[$startcol + 15] : null;
			$this->best_badge_1 = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->best_badge_2 = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->is_published = ($row[$startcol + 18] !== null) ? (boolean) $row[$startcol + 18] : null;
			$this->is_featured = ($row[$startcol + 19] !== null) ? (boolean) $row[$startcol + 19] : null;
			$this->comments_count = ($row[$startcol + 20] !== null) ? (int) $row[$startcol + 20] : null;
			$this->created_at = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->updated_at = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 23; // 23 = PostPeer::NUM_COLUMNS - PostPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Post object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aPartie !== null && $this->partie_id !== $this->aPartie->getId()) {
			$this->aPartie = null;
		}
		if ($this->aPostRelatedByReplicaPostId !== null && $this->replica_post_id !== $this->aPostRelatedByReplicaPostId->getId()) {
			$this->aPostRelatedByReplicaPostId = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PostPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = PostPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aPartie = null;
			$this->aPostRelatedByReplicaPostId = null;
			$this->collPostBadges = null;
			$this->lastPostBadgeCriteria = null;

			$this->collInappropriates = null;
			$this->lastInappropriateCriteria = null;

			$this->collPostsRelatedByReplicaPostId = null;
			$this->lastPostRelatedByReplicaPostIdCriteria = null;

			$this->collPostPollAnswers = null;
			$this->lastPostPollAnswerCriteria = null;

			$this->collPostPollVotes = null;
			$this->lastPostPollVoteCriteria = null;

			$this->collPostVisitss = null;
			$this->lastPostVisitsCriteria = null;

			$this->collPostDailyStatss = null;
			$this->lastPostDailyStatsCriteria = null;

			$this->collPostIndexs = null;
			$this->lastPostIndexCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PostPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasePost:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				PostPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasePost:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PostPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasePost:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(PostPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(PostPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasePost:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				PostPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aPartie !== null) {
				if ($this->aPartie->isModified() || $this->aPartie->isNew()) {
					$affectedRows += $this->aPartie->save($con);
				}
				$this->setPartie($this->aPartie);
			}

			if ($this->aPostRelatedByReplicaPostId !== null) {
				if ($this->aPostRelatedByReplicaPostId->isModified() || $this->aPostRelatedByReplicaPostId->isNew()) {
					$affectedRows += $this->aPostRelatedByReplicaPostId->save($con);
				}
				$this->setPostRelatedByReplicaPostId($this->aPostRelatedByReplicaPostId);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = PostPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = PostPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += PostPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collPostBadges !== null) {
				foreach ($this->collPostBadges as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collInappropriates !== null) {
				foreach ($this->collInappropriates as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPostsRelatedByReplicaPostId !== null) {
				foreach ($this->collPostsRelatedByReplicaPostId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPostPollAnswers !== null) {
				foreach ($this->collPostPollAnswers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPostPollVotes !== null) {
				foreach ($this->collPostPollVotes as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPostVisitss !== null) {
				foreach ($this->collPostVisitss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPostDailyStatss !== null) {
				foreach ($this->collPostDailyStatss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPostIndexs !== null) {
				foreach ($this->collPostIndexs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aPartie !== null) {
				if (!$this->aPartie->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPartie->getValidationFailures());
				}
			}

			if ($this->aPostRelatedByReplicaPostId !== null) {
				if (!$this->aPostRelatedByReplicaPostId->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPostRelatedByReplicaPostId->getValidationFailures());
				}
			}


			if (($retval = PostPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collPostBadges !== null) {
					foreach ($this->collPostBadges as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collInappropriates !== null) {
					foreach ($this->collInappropriates as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPostsRelatedByReplicaPostId !== null) {
					foreach ($this->collPostsRelatedByReplicaPostId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPostPollAnswers !== null) {
					foreach ($this->collPostPollAnswers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPostPollVotes !== null) {
					foreach ($this->collPostPollVotes as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPostVisitss !== null) {
					foreach ($this->collPostVisitss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPostDailyStatss !== null) {
					foreach ($this->collPostDailyStatss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPostIndexs !== null) {
					foreach ($this->collPostIndexs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PostPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getPartieId();
				break;
			case 2:
				return $this->getReplicaPostId();
				break;
			case 3:
				return $this->getType();
				break;
			case 4:
				return $this->getTitle();
				break;
			case 5:
				return $this->getUrl();
				break;
			case 6:
				return $this->getText();
				break;
			case 7:
				return $this->getPhotoFile();
				break;
			case 8:
				return $this->getPhotoUrl();
				break;
			case 9:
				return $this->getQuote();
				break;
			case 10:
				return $this->getQuoteAuthor();
				break;
			case 11:
				return $this->getLinkTitle();
				break;
			case 12:
				return $this->getLinkUrl();
				break;
			case 13:
				return $this->getLinkImage();
				break;
			case 14:
				return $this->getVideoUrl();
				break;
			case 15:
				return $this->getTotalIndex();
				break;
			case 16:
				return $this->getBestBadge1();
				break;
			case 17:
				return $this->getBestBadge2();
				break;
			case 18:
				return $this->getIsPublished();
				break;
			case 19:
				return $this->getIsFeatured();
				break;
			case 20:
				return $this->getCommentsCount();
				break;
			case 21:
				return $this->getCreatedAt();
				break;
			case 22:
				return $this->getUpdatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = PostPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getPartieId(),
			$keys[2] => $this->getReplicaPostId(),
			$keys[3] => $this->getType(),
			$keys[4] => $this->getTitle(),
			$keys[5] => $this->getUrl(),
			$keys[6] => $this->getText(),
			$keys[7] => $this->getPhotoFile(),
			$keys[8] => $this->getPhotoUrl(),
			$keys[9] => $this->getQuote(),
			$keys[10] => $this->getQuoteAuthor(),
			$keys[11] => $this->getLinkTitle(),
			$keys[12] => $this->getLinkUrl(),
			$keys[13] => $this->getLinkImage(),
			$keys[14] => $this->getVideoUrl(),
			$keys[15] => $this->getTotalIndex(),
			$keys[16] => $this->getBestBadge1(),
			$keys[17] => $this->getBestBadge2(),
			$keys[18] => $this->getIsPublished(),
			$keys[19] => $this->getIsFeatured(),
			$keys[20] => $this->getCommentsCount(),
			$keys[21] => $this->getCreatedAt(),
			$keys[22] => $this->getUpdatedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PostPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setPartieId($value);
				break;
			case 2:
				$this->setReplicaPostId($value);
				break;
			case 3:
				$this->setType($value);
				break;
			case 4:
				$this->setTitle($value);
				break;
			case 5:
				$this->setUrl($value);
				break;
			case 6:
				$this->setText($value);
				break;
			case 7:
				$this->setPhotoFile($value);
				break;
			case 8:
				$this->setPhotoUrl($value);
				break;
			case 9:
				$this->setQuote($value);
				break;
			case 10:
				$this->setQuoteAuthor($value);
				break;
			case 11:
				$this->setLinkTitle($value);
				break;
			case 12:
				$this->setLinkUrl($value);
				break;
			case 13:
				$this->setLinkImage($value);
				break;
			case 14:
				$this->setVideoUrl($value);
				break;
			case 15:
				$this->setTotalIndex($value);
				break;
			case 16:
				$this->setBestBadge1($value);
				break;
			case 17:
				$this->setBestBadge2($value);
				break;
			case 18:
				$this->setIsPublished($value);
				break;
			case 19:
				$this->setIsFeatured($value);
				break;
			case 20:
				$this->setCommentsCount($value);
				break;
			case 21:
				$this->setCreatedAt($value);
				break;
			case 22:
				$this->setUpdatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = PostPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setPartieId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setReplicaPostId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setType($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setTitle($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setUrl($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setText($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setPhotoFile($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setPhotoUrl($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setQuote($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setQuoteAuthor($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setLinkTitle($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setLinkUrl($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setLinkImage($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setVideoUrl($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setTotalIndex($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setBestBadge1($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setBestBadge2($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setIsPublished($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setIsFeatured($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setCommentsCount($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setCreatedAt($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setUpdatedAt($arr[$keys[22]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(PostPeer::DATABASE_NAME);

		if ($this->isColumnModified(PostPeer::ID)) $criteria->add(PostPeer::ID, $this->id);
		if ($this->isColumnModified(PostPeer::PARTIE_ID)) $criteria->add(PostPeer::PARTIE_ID, $this->partie_id);
		if ($this->isColumnModified(PostPeer::REPLICA_POST_ID)) $criteria->add(PostPeer::REPLICA_POST_ID, $this->replica_post_id);
		if ($this->isColumnModified(PostPeer::TYPE)) $criteria->add(PostPeer::TYPE, $this->type);
		if ($this->isColumnModified(PostPeer::TITLE)) $criteria->add(PostPeer::TITLE, $this->title);
		if ($this->isColumnModified(PostPeer::URL)) $criteria->add(PostPeer::URL, $this->url);
		if ($this->isColumnModified(PostPeer::TEXT)) $criteria->add(PostPeer::TEXT, $this->text);
		if ($this->isColumnModified(PostPeer::PHOTO_FILE)) $criteria->add(PostPeer::PHOTO_FILE, $this->photo_file);
		if ($this->isColumnModified(PostPeer::PHOTO_URL)) $criteria->add(PostPeer::PHOTO_URL, $this->photo_url);
		if ($this->isColumnModified(PostPeer::QUOTE)) $criteria->add(PostPeer::QUOTE, $this->quote);
		if ($this->isColumnModified(PostPeer::QUOTE_AUTHOR)) $criteria->add(PostPeer::QUOTE_AUTHOR, $this->quote_author);
		if ($this->isColumnModified(PostPeer::LINK_TITLE)) $criteria->add(PostPeer::LINK_TITLE, $this->link_title);
		if ($this->isColumnModified(PostPeer::LINK_URL)) $criteria->add(PostPeer::LINK_URL, $this->link_url);
		if ($this->isColumnModified(PostPeer::LINK_IMAGE)) $criteria->add(PostPeer::LINK_IMAGE, $this->link_image);
		if ($this->isColumnModified(PostPeer::VIDEO_URL)) $criteria->add(PostPeer::VIDEO_URL, $this->video_url);
		if ($this->isColumnModified(PostPeer::TOTAL_INDEX)) $criteria->add(PostPeer::TOTAL_INDEX, $this->total_index);
		if ($this->isColumnModified(PostPeer::BEST_BADGE_1)) $criteria->add(PostPeer::BEST_BADGE_1, $this->best_badge_1);
		if ($this->isColumnModified(PostPeer::BEST_BADGE_2)) $criteria->add(PostPeer::BEST_BADGE_2, $this->best_badge_2);
		if ($this->isColumnModified(PostPeer::IS_PUBLISHED)) $criteria->add(PostPeer::IS_PUBLISHED, $this->is_published);
		if ($this->isColumnModified(PostPeer::IS_FEATURED)) $criteria->add(PostPeer::IS_FEATURED, $this->is_featured);
		if ($this->isColumnModified(PostPeer::COMMENTS_COUNT)) $criteria->add(PostPeer::COMMENTS_COUNT, $this->comments_count);
		if ($this->isColumnModified(PostPeer::CREATED_AT)) $criteria->add(PostPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(PostPeer::UPDATED_AT)) $criteria->add(PostPeer::UPDATED_AT, $this->updated_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(PostPeer::DATABASE_NAME);

		$criteria->add(PostPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Post (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setPartieId($this->partie_id);

		$copyObj->setReplicaPostId($this->replica_post_id);

		$copyObj->setType($this->type);

		$copyObj->setTitle($this->title);

		$copyObj->setUrl($this->url);

		$copyObj->setText($this->text);

		$copyObj->setPhotoFile($this->photo_file);

		$copyObj->setPhotoUrl($this->photo_url);

		$copyObj->setQuote($this->quote);

		$copyObj->setQuoteAuthor($this->quote_author);

		$copyObj->setLinkTitle($this->link_title);

		$copyObj->setLinkUrl($this->link_url);

		$copyObj->setLinkImage($this->link_image);

		$copyObj->setVideoUrl($this->video_url);

		$copyObj->setTotalIndex($this->total_index);

		$copyObj->setBestBadge1($this->best_badge_1);

		$copyObj->setBestBadge2($this->best_badge_2);

		$copyObj->setIsPublished($this->is_published);

		$copyObj->setIsFeatured($this->is_featured);

		$copyObj->setCommentsCount($this->comments_count);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getPostBadges() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPostBadge($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getInappropriates() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addInappropriate($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPostsRelatedByReplicaPostId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPostRelatedByReplicaPostId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPostPollAnswers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPostPollAnswer($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPostPollVotes() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPostPollVote($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPostVisitss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPostVisits($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPostDailyStatss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPostDailyStats($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPostIndexs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPostIndex($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Post Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     PostPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new PostPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Partie object.
	 *
	 * @param      Partie $v
	 * @return     Post The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPartie(Partie $v = null)
	{
		if ($v === null) {
			$this->setPartieId(NULL);
		} else {
			$this->setPartieId($v->getId());
		}

		$this->aPartie = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Partie object, it will not be re-added.
		if ($v !== null) {
			$v->addPost($this);
		}

		return $this;
	}


	/**
	 * Get the associated Partie object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Partie The associated Partie object.
	 * @throws     PropelException
	 */
	public function getPartie(PropelPDO $con = null)
	{
		if ($this->aPartie === null && ($this->partie_id !== null)) {
			$this->aPartie = PartiePeer::retrieveByPk($this->partie_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aPartie->addPosts($this);
			 */
		}
		return $this->aPartie;
	}

	/**
	 * Declares an association between this object and a Post object.
	 *
	 * @param      Post $v
	 * @return     Post The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPostRelatedByReplicaPostId(Post $v = null)
	{
		if ($v === null) {
			$this->setReplicaPostId(NULL);
		} else {
			$this->setReplicaPostId($v->getId());
		}

		$this->aPostRelatedByReplicaPostId = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Post object, it will not be re-added.
		if ($v !== null) {
			$v->addPostRelatedByReplicaPostId($this);
		}

		return $this;
	}


	/**
	 * Get the associated Post object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Post The associated Post object.
	 * @throws     PropelException
	 */
	public function getPostRelatedByReplicaPostId(PropelPDO $con = null)
	{
		if ($this->aPostRelatedByReplicaPostId === null && ($this->replica_post_id !== null)) {
			$this->aPostRelatedByReplicaPostId = PostPeer::retrieveByPk($this->replica_post_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aPostRelatedByReplicaPostId->addPostsRelatedByReplicaPostId($this);
			 */
		}
		return $this->aPostRelatedByReplicaPostId;
	}

	/**
	 * Clears out the collPostBadges collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPostBadges()
	 */
	public function clearPostBadges()
	{
		$this->collPostBadges = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPostBadges collection (array).
	 *
	 * By default this just sets the collPostBadges collection to an empty array (like clearcollPostBadges());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPostBadges()
	{
		$this->collPostBadges = array();
	}

	/**
	 * Gets an array of PostBadge objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Post has previously been saved, it will retrieve
	 * related PostBadges from storage. If this Post is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PostBadge[]
	 * @throws     PropelException
	 */
	public function getPostBadges($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPostBadges === null) {
			if ($this->isNew()) {
			   $this->collPostBadges = array();
			} else {

				$criteria->add(PostBadgePeer::POST_ID, $this->id);

				PostBadgePeer::addSelectColumns($criteria);
				$this->collPostBadges = PostBadgePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PostBadgePeer::POST_ID, $this->id);

				PostBadgePeer::addSelectColumns($criteria);
				if (!isset($this->lastPostBadgeCriteria) || !$this->lastPostBadgeCriteria->equals($criteria)) {
					$this->collPostBadges = PostBadgePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPostBadgeCriteria = $criteria;
		return $this->collPostBadges;
	}

	/**
	 * Returns the number of related PostBadge objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PostBadge objects.
	 * @throws     PropelException
	 */
	public function countPostBadges(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPostBadges === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PostBadgePeer::POST_ID, $this->id);

				$count = PostBadgePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PostBadgePeer::POST_ID, $this->id);

				if (!isset($this->lastPostBadgeCriteria) || !$this->lastPostBadgeCriteria->equals($criteria)) {
					$count = PostBadgePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPostBadges);
				}
			} else {
				$count = count($this->collPostBadges);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PostBadge object to this object
	 * through the PostBadge foreign key attribute.
	 *
	 * @param      PostBadge $l PostBadge
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPostBadge(PostBadge $l)
	{
		if ($this->collPostBadges === null) {
			$this->initPostBadges();
		}
		if (!in_array($l, $this->collPostBadges, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPostBadges, $l);
			$l->setPost($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Post is new, it will return
	 * an empty collection; or if this Post has previously
	 * been saved, it will retrieve related PostBadges from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Post.
	 */
	public function getPostBadgesJoinBadge($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPostBadges === null) {
			if ($this->isNew()) {
				$this->collPostBadges = array();
			} else {

				$criteria->add(PostBadgePeer::POST_ID, $this->id);

				$this->collPostBadges = PostBadgePeer::doSelectJoinBadge($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PostBadgePeer::POST_ID, $this->id);

			if (!isset($this->lastPostBadgeCriteria) || !$this->lastPostBadgeCriteria->equals($criteria)) {
				$this->collPostBadges = PostBadgePeer::doSelectJoinBadge($criteria, $con, $join_behavior);
			}
		}
		$this->lastPostBadgeCriteria = $criteria;

		return $this->collPostBadges;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Post is new, it will return
	 * an empty collection; or if this Post has previously
	 * been saved, it will retrieve related PostBadges from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Post.
	 */
	public function getPostBadgesJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPostBadges === null) {
			if ($this->isNew()) {
				$this->collPostBadges = array();
			} else {

				$criteria->add(PostBadgePeer::POST_ID, $this->id);

				$this->collPostBadges = PostBadgePeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PostBadgePeer::POST_ID, $this->id);

			if (!isset($this->lastPostBadgeCriteria) || !$this->lastPostBadgeCriteria->equals($criteria)) {
				$this->collPostBadges = PostBadgePeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastPostBadgeCriteria = $criteria;

		return $this->collPostBadges;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Post is new, it will return
	 * an empty collection; or if this Post has previously
	 * been saved, it will retrieve related PostBadges from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Post.
	 */
	public function getPostBadgesJoinBadgeType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPostBadges === null) {
			if ($this->isNew()) {
				$this->collPostBadges = array();
			} else {

				$criteria->add(PostBadgePeer::POST_ID, $this->id);

				$this->collPostBadges = PostBadgePeer::doSelectJoinBadgeType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PostBadgePeer::POST_ID, $this->id);

			if (!isset($this->lastPostBadgeCriteria) || !$this->lastPostBadgeCriteria->equals($criteria)) {
				$this->collPostBadges = PostBadgePeer::doSelectJoinBadgeType($criteria, $con, $join_behavior);
			}
		}
		$this->lastPostBadgeCriteria = $criteria;

		return $this->collPostBadges;
	}

	/**
	 * Clears out the collInappropriates collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addInappropriates()
	 */
	public function clearInappropriates()
	{
		$this->collInappropriates = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collInappropriates collection (array).
	 *
	 * By default this just sets the collInappropriates collection to an empty array (like clearcollInappropriates());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initInappropriates()
	{
		$this->collInappropriates = array();
	}

	/**
	 * Gets an array of Inappropriate objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Post has previously been saved, it will retrieve
	 * related Inappropriates from storage. If this Post is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Inappropriate[]
	 * @throws     PropelException
	 */
	public function getInappropriates($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collInappropriates === null) {
			if ($this->isNew()) {
			   $this->collInappropriates = array();
			} else {

				$criteria->add(InappropriatePeer::POST_ID, $this->id);

				InappropriatePeer::addSelectColumns($criteria);
				$this->collInappropriates = InappropriatePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(InappropriatePeer::POST_ID, $this->id);

				InappropriatePeer::addSelectColumns($criteria);
				if (!isset($this->lastInappropriateCriteria) || !$this->lastInappropriateCriteria->equals($criteria)) {
					$this->collInappropriates = InappropriatePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastInappropriateCriteria = $criteria;
		return $this->collInappropriates;
	}

	/**
	 * Returns the number of related Inappropriate objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Inappropriate objects.
	 * @throws     PropelException
	 */
	public function countInappropriates(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collInappropriates === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(InappropriatePeer::POST_ID, $this->id);

				$count = InappropriatePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(InappropriatePeer::POST_ID, $this->id);

				if (!isset($this->lastInappropriateCriteria) || !$this->lastInappropriateCriteria->equals($criteria)) {
					$count = InappropriatePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collInappropriates);
				}
			} else {
				$count = count($this->collInappropriates);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Inappropriate object to this object
	 * through the Inappropriate foreign key attribute.
	 *
	 * @param      Inappropriate $l Inappropriate
	 * @return     void
	 * @throws     PropelException
	 */
	public function addInappropriate(Inappropriate $l)
	{
		if ($this->collInappropriates === null) {
			$this->initInappropriates();
		}
		if (!in_array($l, $this->collInappropriates, true)) { // only add it if the **same** object is not already associated
			array_push($this->collInappropriates, $l);
			$l->setPost($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Post is new, it will return
	 * an empty collection; or if this Post has previously
	 * been saved, it will retrieve related Inappropriates from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Post.
	 */
	public function getInappropriatesJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collInappropriates === null) {
			if ($this->isNew()) {
				$this->collInappropriates = array();
			} else {

				$criteria->add(InappropriatePeer::POST_ID, $this->id);

				$this->collInappropriates = InappropriatePeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(InappropriatePeer::POST_ID, $this->id);

			if (!isset($this->lastInappropriateCriteria) || !$this->lastInappropriateCriteria->equals($criteria)) {
				$this->collInappropriates = InappropriatePeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastInappropriateCriteria = $criteria;

		return $this->collInappropriates;
	}

	/**
	 * Clears out the collPostsRelatedByReplicaPostId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPostsRelatedByReplicaPostId()
	 */
	public function clearPostsRelatedByReplicaPostId()
	{
		$this->collPostsRelatedByReplicaPostId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPostsRelatedByReplicaPostId collection (array).
	 *
	 * By default this just sets the collPostsRelatedByReplicaPostId collection to an empty array (like clearcollPostsRelatedByReplicaPostId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPostsRelatedByReplicaPostId()
	{
		$this->collPostsRelatedByReplicaPostId = array();
	}

	/**
	 * Gets an array of Post objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Post has previously been saved, it will retrieve
	 * related PostsRelatedByReplicaPostId from storage. If this Post is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Post[]
	 * @throws     PropelException
	 */
	public function getPostsRelatedByReplicaPostId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPostsRelatedByReplicaPostId === null) {
			if ($this->isNew()) {
			   $this->collPostsRelatedByReplicaPostId = array();
			} else {

				$criteria->add(PostPeer::REPLICA_POST_ID, $this->id);

				PostPeer::addSelectColumns($criteria);
				$this->collPostsRelatedByReplicaPostId = PostPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PostPeer::REPLICA_POST_ID, $this->id);

				PostPeer::addSelectColumns($criteria);
				if (!isset($this->lastPostRelatedByReplicaPostIdCriteria) || !$this->lastPostRelatedByReplicaPostIdCriteria->equals($criteria)) {
					$this->collPostsRelatedByReplicaPostId = PostPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPostRelatedByReplicaPostIdCriteria = $criteria;
		return $this->collPostsRelatedByReplicaPostId;
	}

	/**
	 * Returns the number of related Post objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Post objects.
	 * @throws     PropelException
	 */
	public function countPostsRelatedByReplicaPostId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPostsRelatedByReplicaPostId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PostPeer::REPLICA_POST_ID, $this->id);

				$count = PostPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PostPeer::REPLICA_POST_ID, $this->id);

				if (!isset($this->lastPostRelatedByReplicaPostIdCriteria) || !$this->lastPostRelatedByReplicaPostIdCriteria->equals($criteria)) {
					$count = PostPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPostsRelatedByReplicaPostId);
				}
			} else {
				$count = count($this->collPostsRelatedByReplicaPostId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Post object to this object
	 * through the Post foreign key attribute.
	 *
	 * @param      Post $l Post
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPostRelatedByReplicaPostId(Post $l)
	{
		if ($this->collPostsRelatedByReplicaPostId === null) {
			$this->initPostsRelatedByReplicaPostId();
		}
		if (!in_array($l, $this->collPostsRelatedByReplicaPostId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPostsRelatedByReplicaPostId, $l);
			$l->setPostRelatedByReplicaPostId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Post is new, it will return
	 * an empty collection; or if this Post has previously
	 * been saved, it will retrieve related PostsRelatedByReplicaPostId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Post.
	 */
	public function getPostsRelatedByReplicaPostIdJoinPartie($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPostsRelatedByReplicaPostId === null) {
			if ($this->isNew()) {
				$this->collPostsRelatedByReplicaPostId = array();
			} else {

				$criteria->add(PostPeer::REPLICA_POST_ID, $this->id);

				$this->collPostsRelatedByReplicaPostId = PostPeer::doSelectJoinPartie($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PostPeer::REPLICA_POST_ID, $this->id);

			if (!isset($this->lastPostRelatedByReplicaPostIdCriteria) || !$this->lastPostRelatedByReplicaPostIdCriteria->equals($criteria)) {
				$this->collPostsRelatedByReplicaPostId = PostPeer::doSelectJoinPartie($criteria, $con, $join_behavior);
			}
		}
		$this->lastPostRelatedByReplicaPostIdCriteria = $criteria;

		return $this->collPostsRelatedByReplicaPostId;
	}

	/**
	 * Clears out the collPostPollAnswers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPostPollAnswers()
	 */
	public function clearPostPollAnswers()
	{
		$this->collPostPollAnswers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPostPollAnswers collection (array).
	 *
	 * By default this just sets the collPostPollAnswers collection to an empty array (like clearcollPostPollAnswers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPostPollAnswers()
	{
		$this->collPostPollAnswers = array();
	}

	/**
	 * Gets an array of PostPollAnswer objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Post has previously been saved, it will retrieve
	 * related PostPollAnswers from storage. If this Post is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PostPollAnswer[]
	 * @throws     PropelException
	 */
	public function getPostPollAnswers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPostPollAnswers === null) {
			if ($this->isNew()) {
			   $this->collPostPollAnswers = array();
			} else {

				$criteria->add(PostPollAnswerPeer::POST_ID, $this->id);

				PostPollAnswerPeer::addSelectColumns($criteria);
				$this->collPostPollAnswers = PostPollAnswerPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PostPollAnswerPeer::POST_ID, $this->id);

				PostPollAnswerPeer::addSelectColumns($criteria);
				if (!isset($this->lastPostPollAnswerCriteria) || !$this->lastPostPollAnswerCriteria->equals($criteria)) {
					$this->collPostPollAnswers = PostPollAnswerPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPostPollAnswerCriteria = $criteria;
		return $this->collPostPollAnswers;
	}

	/**
	 * Returns the number of related PostPollAnswer objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PostPollAnswer objects.
	 * @throws     PropelException
	 */
	public function countPostPollAnswers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPostPollAnswers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PostPollAnswerPeer::POST_ID, $this->id);

				$count = PostPollAnswerPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PostPollAnswerPeer::POST_ID, $this->id);

				if (!isset($this->lastPostPollAnswerCriteria) || !$this->lastPostPollAnswerCriteria->equals($criteria)) {
					$count = PostPollAnswerPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPostPollAnswers);
				}
			} else {
				$count = count($this->collPostPollAnswers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PostPollAnswer object to this object
	 * through the PostPollAnswer foreign key attribute.
	 *
	 * @param      PostPollAnswer $l PostPollAnswer
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPostPollAnswer(PostPollAnswer $l)
	{
		if ($this->collPostPollAnswers === null) {
			$this->initPostPollAnswers();
		}
		if (!in_array($l, $this->collPostPollAnswers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPostPollAnswers, $l);
			$l->setPost($this);
		}
	}

	/**
	 * Clears out the collPostPollVotes collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPostPollVotes()
	 */
	public function clearPostPollVotes()
	{
		$this->collPostPollVotes = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPostPollVotes collection (array).
	 *
	 * By default this just sets the collPostPollVotes collection to an empty array (like clearcollPostPollVotes());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPostPollVotes()
	{
		$this->collPostPollVotes = array();
	}

	/**
	 * Gets an array of PostPollVote objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Post has previously been saved, it will retrieve
	 * related PostPollVotes from storage. If this Post is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PostPollVote[]
	 * @throws     PropelException
	 */
	public function getPostPollVotes($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPostPollVotes === null) {
			if ($this->isNew()) {
			   $this->collPostPollVotes = array();
			} else {

				$criteria->add(PostPollVotePeer::POST_ID, $this->id);

				PostPollVotePeer::addSelectColumns($criteria);
				$this->collPostPollVotes = PostPollVotePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PostPollVotePeer::POST_ID, $this->id);

				PostPollVotePeer::addSelectColumns($criteria);
				if (!isset($this->lastPostPollVoteCriteria) || !$this->lastPostPollVoteCriteria->equals($criteria)) {
					$this->collPostPollVotes = PostPollVotePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPostPollVoteCriteria = $criteria;
		return $this->collPostPollVotes;
	}

	/**
	 * Returns the number of related PostPollVote objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PostPollVote objects.
	 * @throws     PropelException
	 */
	public function countPostPollVotes(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPostPollVotes === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PostPollVotePeer::POST_ID, $this->id);

				$count = PostPollVotePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PostPollVotePeer::POST_ID, $this->id);

				if (!isset($this->lastPostPollVoteCriteria) || !$this->lastPostPollVoteCriteria->equals($criteria)) {
					$count = PostPollVotePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPostPollVotes);
				}
			} else {
				$count = count($this->collPostPollVotes);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PostPollVote object to this object
	 * through the PostPollVote foreign key attribute.
	 *
	 * @param      PostPollVote $l PostPollVote
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPostPollVote(PostPollVote $l)
	{
		if ($this->collPostPollVotes === null) {
			$this->initPostPollVotes();
		}
		if (!in_array($l, $this->collPostPollVotes, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPostPollVotes, $l);
			$l->setPost($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Post is new, it will return
	 * an empty collection; or if this Post has previously
	 * been saved, it will retrieve related PostPollVotes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Post.
	 */
	public function getPostPollVotesJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPostPollVotes === null) {
			if ($this->isNew()) {
				$this->collPostPollVotes = array();
			} else {

				$criteria->add(PostPollVotePeer::POST_ID, $this->id);

				$this->collPostPollVotes = PostPollVotePeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PostPollVotePeer::POST_ID, $this->id);

			if (!isset($this->lastPostPollVoteCriteria) || !$this->lastPostPollVoteCriteria->equals($criteria)) {
				$this->collPostPollVotes = PostPollVotePeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastPostPollVoteCriteria = $criteria;

		return $this->collPostPollVotes;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Post is new, it will return
	 * an empty collection; or if this Post has previously
	 * been saved, it will retrieve related PostPollVotes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Post.
	 */
	public function getPostPollVotesJoinPostPollAnswer($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPostPollVotes === null) {
			if ($this->isNew()) {
				$this->collPostPollVotes = array();
			} else {

				$criteria->add(PostPollVotePeer::POST_ID, $this->id);

				$this->collPostPollVotes = PostPollVotePeer::doSelectJoinPostPollAnswer($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PostPollVotePeer::POST_ID, $this->id);

			if (!isset($this->lastPostPollVoteCriteria) || !$this->lastPostPollVoteCriteria->equals($criteria)) {
				$this->collPostPollVotes = PostPollVotePeer::doSelectJoinPostPollAnswer($criteria, $con, $join_behavior);
			}
		}
		$this->lastPostPollVoteCriteria = $criteria;

		return $this->collPostPollVotes;
	}

	/**
	 * Clears out the collPostVisitss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPostVisitss()
	 */
	public function clearPostVisitss()
	{
		$this->collPostVisitss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPostVisitss collection (array).
	 *
	 * By default this just sets the collPostVisitss collection to an empty array (like clearcollPostVisitss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPostVisitss()
	{
		$this->collPostVisitss = array();
	}

	/**
	 * Gets an array of PostVisits objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Post has previously been saved, it will retrieve
	 * related PostVisitss from storage. If this Post is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PostVisits[]
	 * @throws     PropelException
	 */
	public function getPostVisitss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPostVisitss === null) {
			if ($this->isNew()) {
			   $this->collPostVisitss = array();
			} else {

				$criteria->add(PostVisitsPeer::POST_ID, $this->id);

				PostVisitsPeer::addSelectColumns($criteria);
				$this->collPostVisitss = PostVisitsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PostVisitsPeer::POST_ID, $this->id);

				PostVisitsPeer::addSelectColumns($criteria);
				if (!isset($this->lastPostVisitsCriteria) || !$this->lastPostVisitsCriteria->equals($criteria)) {
					$this->collPostVisitss = PostVisitsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPostVisitsCriteria = $criteria;
		return $this->collPostVisitss;
	}

	/**
	 * Returns the number of related PostVisits objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PostVisits objects.
	 * @throws     PropelException
	 */
	public function countPostVisitss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPostVisitss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PostVisitsPeer::POST_ID, $this->id);

				$count = PostVisitsPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PostVisitsPeer::POST_ID, $this->id);

				if (!isset($this->lastPostVisitsCriteria) || !$this->lastPostVisitsCriteria->equals($criteria)) {
					$count = PostVisitsPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPostVisitss);
				}
			} else {
				$count = count($this->collPostVisitss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PostVisits object to this object
	 * through the PostVisits foreign key attribute.
	 *
	 * @param      PostVisits $l PostVisits
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPostVisits(PostVisits $l)
	{
		if ($this->collPostVisitss === null) {
			$this->initPostVisitss();
		}
		if (!in_array($l, $this->collPostVisitss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPostVisitss, $l);
			$l->setPost($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Post is new, it will return
	 * an empty collection; or if this Post has previously
	 * been saved, it will retrieve related PostVisitss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Post.
	 */
	public function getPostVisitssJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPostVisitss === null) {
			if ($this->isNew()) {
				$this->collPostVisitss = array();
			} else {

				$criteria->add(PostVisitsPeer::POST_ID, $this->id);

				$this->collPostVisitss = PostVisitsPeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PostVisitsPeer::POST_ID, $this->id);

			if (!isset($this->lastPostVisitsCriteria) || !$this->lastPostVisitsCriteria->equals($criteria)) {
				$this->collPostVisitss = PostVisitsPeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastPostVisitsCriteria = $criteria;

		return $this->collPostVisitss;
	}

	/**
	 * Clears out the collPostDailyStatss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPostDailyStatss()
	 */
	public function clearPostDailyStatss()
	{
		$this->collPostDailyStatss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPostDailyStatss collection (array).
	 *
	 * By default this just sets the collPostDailyStatss collection to an empty array (like clearcollPostDailyStatss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPostDailyStatss()
	{
		$this->collPostDailyStatss = array();
	}

	/**
	 * Gets an array of PostDailyStats objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Post has previously been saved, it will retrieve
	 * related PostDailyStatss from storage. If this Post is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PostDailyStats[]
	 * @throws     PropelException
	 */
	public function getPostDailyStatss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPostDailyStatss === null) {
			if ($this->isNew()) {
			   $this->collPostDailyStatss = array();
			} else {

				$criteria->add(PostDailyStatsPeer::POST_ID, $this->id);

				PostDailyStatsPeer::addSelectColumns($criteria);
				$this->collPostDailyStatss = PostDailyStatsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PostDailyStatsPeer::POST_ID, $this->id);

				PostDailyStatsPeer::addSelectColumns($criteria);
				if (!isset($this->lastPostDailyStatsCriteria) || !$this->lastPostDailyStatsCriteria->equals($criteria)) {
					$this->collPostDailyStatss = PostDailyStatsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPostDailyStatsCriteria = $criteria;
		return $this->collPostDailyStatss;
	}

	/**
	 * Returns the number of related PostDailyStats objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PostDailyStats objects.
	 * @throws     PropelException
	 */
	public function countPostDailyStatss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPostDailyStatss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PostDailyStatsPeer::POST_ID, $this->id);

				$count = PostDailyStatsPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PostDailyStatsPeer::POST_ID, $this->id);

				if (!isset($this->lastPostDailyStatsCriteria) || !$this->lastPostDailyStatsCriteria->equals($criteria)) {
					$count = PostDailyStatsPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPostDailyStatss);
				}
			} else {
				$count = count($this->collPostDailyStatss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PostDailyStats object to this object
	 * through the PostDailyStats foreign key attribute.
	 *
	 * @param      PostDailyStats $l PostDailyStats
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPostDailyStats(PostDailyStats $l)
	{
		if ($this->collPostDailyStatss === null) {
			$this->initPostDailyStatss();
		}
		if (!in_array($l, $this->collPostDailyStatss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPostDailyStatss, $l);
			$l->setPost($this);
		}
	}

	/**
	 * Clears out the collPostIndexs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPostIndexs()
	 */
	public function clearPostIndexs()
	{
		$this->collPostIndexs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPostIndexs collection (array).
	 *
	 * By default this just sets the collPostIndexs collection to an empty array (like clearcollPostIndexs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPostIndexs()
	{
		$this->collPostIndexs = array();
	}

	/**
	 * Gets an array of PostIndex objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Post has previously been saved, it will retrieve
	 * related PostIndexs from storage. If this Post is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PostIndex[]
	 * @throws     PropelException
	 */
	public function getPostIndexs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPostIndexs === null) {
			if ($this->isNew()) {
			   $this->collPostIndexs = array();
			} else {

				$criteria->add(PostIndexPeer::POST_ID, $this->id);

				PostIndexPeer::addSelectColumns($criteria);
				$this->collPostIndexs = PostIndexPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PostIndexPeer::POST_ID, $this->id);

				PostIndexPeer::addSelectColumns($criteria);
				if (!isset($this->lastPostIndexCriteria) || !$this->lastPostIndexCriteria->equals($criteria)) {
					$this->collPostIndexs = PostIndexPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPostIndexCriteria = $criteria;
		return $this->collPostIndexs;
	}

	/**
	 * Returns the number of related PostIndex objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PostIndex objects.
	 * @throws     PropelException
	 */
	public function countPostIndexs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PostPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPostIndexs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PostIndexPeer::POST_ID, $this->id);

				$count = PostIndexPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PostIndexPeer::POST_ID, $this->id);

				if (!isset($this->lastPostIndexCriteria) || !$this->lastPostIndexCriteria->equals($criteria)) {
					$count = PostIndexPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPostIndexs);
				}
			} else {
				$count = count($this->collPostIndexs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PostIndex object to this object
	 * through the PostIndex foreign key attribute.
	 *
	 * @param      PostIndex $l PostIndex
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPostIndex(PostIndex $l)
	{
		if ($this->collPostIndexs === null) {
			$this->initPostIndexs();
		}
		if (!in_array($l, $this->collPostIndexs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPostIndexs, $l);
			$l->setPost($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collPostBadges) {
				foreach ((array) $this->collPostBadges as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collInappropriates) {
				foreach ((array) $this->collInappropriates as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPostsRelatedByReplicaPostId) {
				foreach ((array) $this->collPostsRelatedByReplicaPostId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPostPollAnswers) {
				foreach ((array) $this->collPostPollAnswers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPostPollVotes) {
				foreach ((array) $this->collPostPollVotes as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPostVisitss) {
				foreach ((array) $this->collPostVisitss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPostDailyStatss) {
				foreach ((array) $this->collPostDailyStatss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPostIndexs) {
				foreach ((array) $this->collPostIndexs as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collPostBadges = null;
		$this->collInappropriates = null;
		$this->collPostsRelatedByReplicaPostId = null;
		$this->collPostPollAnswers = null;
		$this->collPostPollVotes = null;
		$this->collPostVisitss = null;
		$this->collPostDailyStatss = null;
		$this->collPostIndexs = null;
			$this->aPartie = null;
			$this->aPostRelatedByReplicaPostId = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BasePost:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BasePost::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BasePost
